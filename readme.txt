# Parser Project with Bison and Flex

This project is a parser for a custom language. It uses **Bison** and **Flex** to analyze and validate textual inputs according to a well-defined grammar. The parser is designed to read an input, tokenize it, then build a syntax tree and validate the input.

## Project Files

1. **rendu.y**: Defines the grammar for the syntax parser using Bison. It contains the production rules of the language, including expressions and conditional structures.

2. **rendu.l**: Lexical analyzer defined with Flex, which breaks down an input into a series of tokens to be analyzed.

3. **y.tab.h**: Token definitions generated by Bison, necessary for linking the lexical analyzer with the parser.

4. **rendu.tab.c**: Parser code generated by Bison, used to validate and syntactically analyze the input based on the generated tokens.

5. **tokens.h**: Contains the token declarations. Used to identify the different components of the language.

6. **structs.h**: Declares the data structures used in the project, such as nodes of a syntax tree.

7. **structs.c**: Implements functions that create and manipulate the data structures defined in `structs.h`.

8. **fcntstruct.c**: Provides advanced functions for manipulating the data structures, complementing `structs.c`.

9. **lex.yy.c** and **rendu.tab.c**: Generated by Flex and Bison, these files are the lexical analyzer (`lex.yy.c`) and the parser (`rendu.tab.c`), respectively.

## General Description

These files work together to analyze textual input according to defined rules, build a syntax tree, and execute the instructions accordingly.

The process works as follows:

1. **Lexical Analysis**: `rendu.l` is used by Flex to break the input into tokens, such as identifiers, operators, etc.
2. **Syntax Analysis**: `rendu.y` is used by Bison to verify the structure of the tokens generated by Flex. This allows building a syntax tree.
3. **Data Structures**: The files `structs.h`, `structs.c`, and `fcntstruct.c` are used to create and manipulate the data structures needed to represent the elements of the program.

## Compilation and Execution

To compile the project, use the following commands (assuming Bison and Flex are installed):

```bash
bison -d rendu.y
flex rendu.l
gcc rendu.tab.c lex.yy.c structs.c fcntstruct.c -o parser
